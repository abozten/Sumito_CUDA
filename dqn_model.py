# dqn_model.py
import torch
import torch.nn as nn

class DQNModel(nn.Module):
    """
    Deep Q-Network for Abalone.
    Input: Board state representation
    Output: Q-values for each possible action index. Action indices are generated by valid moves
    """

    def __init__(self, input_channels=3, board_size=9):  # Removed num_actions
        super(DQNModel, self).__init__()

        # Enhanced network architecture with residual connections
        self.conv1 = nn.Conv2d(input_channels, 64, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(64)
        self.conv2 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(128)
        self.conv3 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(128)

        # Residual block
        self.res_conv1 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.res_bn1 = nn.BatchNorm2d(128)
        self.res_conv2 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.res_bn2 = nn.BatchNorm2d(128)

        # Value and advantage streams (Dueling DQN architecture)
        flat_size = 128 * board_size * board_size

        # Value stream
        self.value_stream = nn.Sequential(
            nn.Linear(flat_size, 512),
            nn.ReLU(),
            nn.Linear(512, 1)
        )

        # Advantage stream - Dynamically sized output
        self.advantage_stream = nn.Sequential(
            nn.Linear(flat_size, 512),
            nn.ReLU(),
            nn.Linear(512, 128)  # Reduced output size
        )

        self.relu = nn.ReLU()

    def forward(self, x, num_actions):
        # Convolutional layers with batch normalization
        x = self.relu(self.bn1(self.conv1(x)))
        x = self.relu(self.bn2(self.conv2(x)))
        x = self.relu(self.bn3(self.conv3(x)))

        # Residual block
        residual = x
        x = self.relu(self.res_bn1(self.res_conv1(x)))
        x = self.res_bn2(self.res_conv2(x))
        x = self.relu(x + residual)  # Skip connection

        # Flatten
        x = x.view(x.size(0), -1)

        # Dueling DQN: split into value and advantage streams
        value = self.value_stream(x)
        advantage = self.advantage_stream(x)

        # Dynamically create the final layer based on the number of actions
        action_logits = nn.Linear(128, num_actions).to(x.device)(advantage)  # Adjust this layer's dimensions

        # Combine value and advantage to get Q-values
        q_values = value + (action_logits - action_logits.mean(dim=1, keepdim=True))

        return q_values